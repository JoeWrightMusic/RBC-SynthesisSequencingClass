#N canvas 246 153 511 235 12;
#X text 178 75 Envelope using line;
#X text 178 105 More ways of using line;
#X obj 5 9 cnv 15 278 25 empty empty 2.3:\ Basic\ Envelopes\ with\ Line 20 12 0 14 #dcdcdc #404040 0;
#N canvas 389 25 636 576 line_envelope 0;
#X obj 11 87 osc~ 440;
#X obj 11 552 dac~;
#X msg 422 104 \; pd dsp 1;
#X msg 514 104 \; pd dsp 0;
#X text 423 137 ON;
#X text 531 137 OFF;
#X obj 11 430 *~;
#X text 122 384 <--- ramp generator;
#X text 87 86 <-- sine wave;
#X msg 27 154 0.1 2000;
#X msg 27 251 0 2000;
#X msg 27 176 0.1 50;
#X msg 27 273 0 50;
#X msg 27 198 0.1;
#X msg 27 295 0;
#X text 119 154 <-- slow;
#X text 120 177 <-- fast;
#X text 120 197 <-- instantly;
#X text 121 248 <-- slow;
#X text 122 271 <-- fast;
#X text 122 293 <-- instantly;
#X text 52 551 <-- out;
#X text 9 37 In this patch \, the multiplier is configured to multiply two signals. The amplitude is now a signal computed by the line~ object.;
#X text 48 429 <-- multiply the sine wave by the ramp. There's no longer a "0" argument-- this tells Pd to expect a signal here.;
#X obj 46 524 tabwrite~ line;
#X obj 56 501 metro 250;
#X obj 63 483 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#N canvas 0 22 450 278 (subpatch) 0;
#X array line 882 float 3;

#X coords 0 1 882 -1 200 140 1;
#X restore 423 193 graph;
#X msg 27 346 0.1 \, 0 3000;
#X obj 8 9 cnv 15 450 25 empty empty Basic\ Envelope:\ controlling\ amplitude\ using\ line 20 12 0 14 #e0e0e0 #404040 0;
#X obj 27 384 line~;
#X text 419 83 Turn DSP on or off:;
#X obj 26 125 cnv 15 170 25 empty empty Note\ on 20 12 0 10 #e0e0e0 #404040 0;
#X obj 26 220 cnv 15 170 25 empty empty Note\ off 20 12 0 10 #e0e0e0 #404040 0;
#X obj 26 316 cnv 15 170 25 empty empty Note\ on&off 20 12 0 10 #e0e0e0 #404040 0;
#X text 122 345 <-- instantly on \, slow fade out;
#X obj 11 460 clip~ -1 1;
#X text 86 481 <--- graph audio output;
#X text 27 109 Click the messages to trigger an envelope...;
#X connect 0 0 6 0;
#X connect 6 0 36 0;
#X connect 9 0 30 0;
#X connect 10 0 30 0;
#X connect 11 0 30 0;
#X connect 12 0 30 0;
#X connect 13 0 30 0;
#X connect 14 0 30 0;
#X connect 25 0 24 0;
#X connect 26 0 25 0;
#X connect 28 0 30 0;
#X connect 30 0 6 1;
#X connect 30 0 24 0;
#X connect 36 0 1 0;
#X connect 36 0 1 1;
#X restore 5 76 pd line_envelope;
#N canvas 354 85 661 779 line_ramp_generator 0;
#X obj 92 290 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#N canvas 0 22 450 278 (subpatch) 0;
#X array ramp 882 float 3;

#X coords 0 1 882 -1 200 140 1;
#X restore 13 384 graph;
#X obj 13 135 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 13 158 t b b;
#X msg 53 191 2000;
#X obj 13 267 line;
#X floatatom 13 348 5 0 0 0 - - - 0;
#X msg 13 191 1;
#X text 11 115 Trigger Ramp!;
#X text 131 115 Reset;
#X obj 133 135 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 133 191 0;
#X obj 8 9 cnv 15 450 25 empty empty Using\ line/line~ 20 12 0 14 #e0e0e0 #404040 0;
#X obj 92 327 tabwrite~ ramp;
#X obj 67 267 line~;
#X obj 92 308 metro 25;
#X text 54 349 < Control rate output;
#X text 109 289 < show signal rate output;
#X text 295 112 [line]/[line~]'s left inlet is a target value \; it reaches that target in the time specified (in milliseconds) to its second inlet.;
#X obj 383 181 line~;
#X text 295 174 target value >;
#X text 417 175 < ramp-to-target time in ms;
#X text 296 264 target value >;
#X obj 384 271 line;
#X text 295 157 Signal Rate:;
#X text 295 228 Control Rate:;
#X text 383 246 ramp-to-target time in ms;
#X text 393 257 V;
#X text 295 360 For more info on each of these objects \, right click on them and choose "help";
#X text 294 305 The line~ object (and its control-rate sibling \, line) treat their right inlet specially. The inlets don't retain values the way other inlets do but revert to zero whenever a target is received.;
#X text 428 187 (resets to 0 after ramp);
#X text 429 259 (resets to 0 after ramp);
#X obj 16 591 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 16 621 1 2000;
#X obj 95 685 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 16 662 line;
#X floatatom 16 743 5 0 0 0 - - - 0;
#X obj 95 722 tabwrite~ ramp;
#X obj 70 662 line~;
#X obj 95 703 metro 25;
#X text 57 744 < Control rate output;
#X text 112 684 < show signal rate output;
#X text 81 569 Reset;
#X obj 83 589 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 83 621 0;
#X text 16 569 Ramp;
#X obj 12 89 cnv 15 170 25 empty empty Try\ this: 20 12 0 10 #e0e0e0 #404040 0;
#X obj 12 539 cnv 15 170 25 empty empty A\ shorthand\ Version 20 12 0 10 #e0e0e0 #404040 0;
#X text 294 570 In this example \, message boxes with two numbers each are connected to line~'s left inlet. This can be used as a shorthand for the example above. This is because most Pd objects with more than one inlet will automatically distribute lists of numbers across their inlets (there are some exceptions). In this case \, "0 50" becomes \, "50 at right and 0 at left.";
#X msg 145 231 0.5;
#X text 12 38 Remember the ADSR example from last week> Let's take a closer look at line objects, f 74;
#X connect 0 0 15 0;
#X connect 2 0 3 0;
#X connect 3 0 7 0;
#X connect 3 1 4 0;
#X connect 4 0 5 1;
#X connect 4 0 14 1;
#X connect 5 0 6 0;
#X connect 7 0 5 0;
#X connect 7 0 14 0;
#X connect 10 0 11 0;
#X connect 11 0 5 0;
#X connect 11 0 14 0;
#X connect 14 0 13 0;
#X connect 15 0 13 0;
#X connect 32 0 33 0;
#X connect 33 0 35 0;
#X connect 33 0 38 0;
#X connect 34 0 39 0;
#X connect 35 0 36 0;
#X connect 38 0 37 0;
#X connect 39 0 37 0;
#X connect 43 0 44 0;
#X connect 44 0 38 0;
#X connect 44 0 35 0;
#X connect 49 0 14 0;
#X restore 5 46 pd line_ramp_generator;
#X text 177 46 using [line]/[line~] as a ramp generator;
#N canvas 590 22 1197 822 more_envelopes 0;
#X obj 12 143 line;
#X msg 13 119 1 \, 0 1000;
#X floatatom 12 168 5 0 0 0 - - - 0;
#X msg 71 274 1 \, 0 1000;
#X obj 71 298 line~;
#X obj 11 299 noise~;
#X obj 56 376 *~;
#X obj 46 434 dac~;
#X obj 11 323 *~ 0.2;
#X obj 236 297 line~;
#X obj 176 298 noise~;
#X obj 221 375 *~;
#X obj 211 434 dac~;
#X obj 176 322 *~ 0.2;
#X msg 236 274 1 \, 0 100;
#X obj 75 664 line~;
#X obj 15 597 noise~;
#X obj 60 694 *~;
#X obj 50 743 dac~;
#X obj 15 641 *~ 0.2;
#X msg 75 641 1 \, 0 \$1;
#X obj 75 597 f;
#X obj 100 566 nbx 4 14 10 1000 1 1 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 10 256;
#X text 149 566 ms;
#X msg 75 537 bang;
#X obj 602 687 noise~;
#X obj 641 743 *~;
#X obj 631 792 dac~;
#X obj 602 711 *~ 0.2;
#X obj 599 165 line;
#X floatatom 599 190 5 0 0 0 - - - 0;
#X msg 599 124 1 1000;
#X msg 668 124 0 1000;
#X text 597 106 attack;
#X obj 812 248 line;
#X msg 812 124 1 1000;
#X msg 840 220 0 1000;
#X text 810 106 attack;
#X text 890 220 decay;
#X obj 839 196 delay 1000;
#X obj 815 271 hsl 80 12 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 53 171 hsl 80 12 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X text 592 329 Now let's make a signal version of that \, using [line~];
#X text 10 199 Let's make a signal version of that \, with [line~] and then envelope some [noise~] \, first with a 1000ms line \, and then with a 100ms line:;
#X text 591 344 Let's also make the attack and decay times variable.;
#X obj 656 462 f;
#X obj 741 428 nbx 4 14 5 1000 1 0 empty empty attack 0 -8 0 10 #fcfcfc #000000 #000000 0 256;
#X text 790 428 ms;
#X msg 656 428 bang;
#X obj 923 633 f;
#X obj 960 610 nbx 4 14 10 10000 1 1 empty empty decay 0 -8 0 10 #fcfcfc #000000 #000000 10 256;
#X text 1017 609 ms;
#X text 591 363 We want the decay to trigger directly after the attack is finished \, so we set the time for the [delay] object to equal the attack time:;
#X msg 923 656 0 \$1;
#X msg 656 541 1 \$1;
#X obj 923 540 delay;
#X obj 656 484 t f f;
#X text 995 554 inlet of [delay] forces it to;
#X text 996 569 output a bang after x ms);
#X obj 656 687 line~;
#X obj 8 9 cnv 15 450 25 empty empty More\ Envelopes:\ some\ more\ ways\ of\ using\ line 20 12 0 14 #e0e0e0 #404040 0;
#X obj 8 41 cnv 15 230 25 empty empty 1:\ Basic\ envelope:\ release\ only 20 12 0 10 #e0e0e0 #404040 0;
#X text 10 77 A very basic envelope: starts at 1 \, then ramps down (releases) to zero over 1000ms (1 second);
#X text 68 252 1s release;
#X text 235 252 0.1s release;
#X text 12 504 Ok \, now let's make a version that lets us choose the length of the release.;
#X obj 224 535 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 239 534 \, it triggers the envelope;
#X obj 56 397 clip~ -1 1;
#X obj 221 396 clip~ -1 1;
#X text 173 565 <--- set the release time;
#X text 110 535 <--- Equivalent to;
#X obj 8 477 cnv 15 340 25 empty empty 2:\ Basic\ envelope:\ release\ only\ with\ variable\ length 20 12 0 10 #e0e0e0 #404040 0;
#X text 102 596 <--- This float (floating point number) object stores the;
#X text 132 610 release time;
#X obj 60 715 clip~ -1 1;
#X obj 598 41 cnv 15 340 25 empty empty 3:\ Attack&Release:\ an\ AR\ envelope 20 12 0 10 #e0e0e0 #404040 0;
#X text 596 71 Triggering these in sequence;
#X text 596 82 gives an AR envelope;
#X text 668 106 release;
#X text 806 71 This sequence can be automated as follows:;
#X text 906 196 <--- wait until the attack ramp is done;
#X obj 812 151 t l b;
#X text 852 151 <--- Trigger a bang (b) \, then the listed numbers (l) for;
#X text 881 166 [line]. Remember \, trigger goes from right to left!;
#X text 126 640 <--- the \$1 symbol in this message is a variale ($);
#X text 156 655 In this case \, the first item coming into the message is added to the message in place of \$1 \, completing the list of values for [line~]. In otherwords \, '\$1' is a variable placeholder for incoming values.;
#X text 691 483 <--- send float first to [delay] \, then to the message object;
#X text 690 540 <--- swap variable placeholder;
#X text 718 553 (\$1) for the incoming number;
#X text 966 538 <--- sending a float to the left;
#X obj 641 765 clip~ -1 1;
#X connect 0 0 2 0;
#X connect 0 0 41 0;
#X connect 1 0 0 0;
#X connect 3 0 4 0;
#X connect 4 0 6 1;
#X connect 5 0 8 0;
#X connect 6 0 68 0;
#X connect 8 0 6 0;
#X connect 9 0 11 1;
#X connect 10 0 13 0;
#X connect 11 0 69 0;
#X connect 13 0 11 0;
#X connect 14 0 9 0;
#X connect 15 0 17 1;
#X connect 16 0 19 0;
#X connect 17 0 75 0;
#X connect 19 0 17 0;
#X connect 20 0 15 0;
#X connect 21 0 20 0;
#X connect 22 0 21 1;
#X connect 24 0 21 0;
#X connect 25 0 28 0;
#X connect 26 0 91 0;
#X connect 28 0 26 0;
#X connect 29 0 30 0;
#X connect 31 0 29 0;
#X connect 32 0 29 0;
#X connect 34 0 40 0;
#X connect 35 0 82 0;
#X connect 36 0 34 0;
#X connect 39 0 36 0;
#X connect 45 0 56 0;
#X connect 46 0 45 1;
#X connect 48 0 45 0;
#X connect 49 0 53 0;
#X connect 50 0 49 1;
#X connect 53 0 59 0;
#X connect 54 0 59 0;
#X connect 55 0 49 0;
#X connect 56 0 54 0;
#X connect 56 1 55 0;
#X connect 59 0 26 1;
#X connect 68 0 7 0;
#X connect 68 0 7 1;
#X connect 69 0 12 0;
#X connect 69 0 12 1;
#X connect 75 0 18 0;
#X connect 75 0 18 1;
#X connect 82 0 34 0;
#X connect 82 1 39 0;
#X connect 91 0 27 0;
#X connect 91 0 27 1;
#X restore 5 106 pd more_envelopes;
#X text 6 156 NOTE: you'll notice that the boxes above all have 'pd' as the first term. These are 'sub-patches'. They work the same as the abstractions we've seen so far \, only they're saved as part of the patch and not as a separate file. More on this later...;
