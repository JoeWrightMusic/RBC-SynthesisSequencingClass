#N canvas 103 108 508 309 12;
#X obj 2 1 cnv 15 1000 1000 empty empty empty 20 12 0 14 -203904 -66577
0;
#X obj 3 3 cnv 15 500 40 empty empty Lab5b_-_Notein_Poly_&_Clone 20
12 0 20 -233017 -66577 0;
#X text 260 55 Make reusable code from the previous, f 34;
#X text 260 105 Putting reusable code to use, f 34;
#N canvas 392 191 468 339 Making_An_FM_Abstraction 0;
#X obj 2 0 cnv 15 1000 1000 empty empty empty 20 12 0 14 -203904 -66577
0;
#X obj 180 271 simpleFM~;
#X text 7 50 The simple FM synth we made in the previous patch has
now been re-created as an abstraction: that's a re-usable piece of
code in Pd.;
#X text 7 100 The synth-snippet has been saved in the file "simpleFM~.pd"
\, and in our patch \, we can call it up as an object by typing the
name (minus ".pd") into an empty object.;
#X text 8 155 Remember though \, that this only works if the file you
want to call up is in the same folder as the main patch \, or if the
file is in a folder thats listed in Pd's file path preferences (Pd>Preferences>Path)
;
#X text 8 225 To view the original patch \, right click on [simpleFM~
] and choose "open";
#X obj 3 3 cnv 15 460 40 empty empty Making_an_FM_abstraction 20 12
0 20 -233017 -66577 0;
#X restore 22 55 pd Making_An_FM_Abstraction;
#N canvas 606 161 467 458 Using_Our_FM_Abstraction 0;
#X obj 1 1 cnv 15 1000 1000 empty empty empty 20 12 0 14 -203904 -66577
0;
#X obj 3 3 cnv 15 460 40 empty empty Using_our_FM_abstraction 20 12
0 20 -233017 -66577 0;
#X obj 120 116 hsl 200 30 20 20000 1 1 \$0-carFreq empty CARRIER_FREQ
-2 16 0 15 -262130 -1 -1 9700 1;
#X obj 120 149 hsl 200 30 1 20000 1 1 \$0-modFreq empty MODULATOR_FREQ
-2 16 0 15 -262130 -1 -1 12100 1;
#X obj 120 182 hsl 200 30 0.1 10000 0 1 \$0-depth empty DEPTH -2 16
0 15 -232576 -1 -1 4500 1;
#X text 7 46 We can use our abstraction in place of that same code
in a patch like this one. This can speed up workflow (assuming you've
already made the abstraction) or just make things look tidier and easier
to read.;
#X obj 171 232 r \$0-carFreq;
#X obj 193 251 r \$0-modFreq;
#X obj 213 271 r \$0-depth;
#X obj 171 326 simpleFM~;
#X obj 171 347 *~ 0.1;
#X obj 171 394 clip~ -1 1;
#X obj 171 418 dac~;
#X obj 171 372 *~;
#X obj 241 359 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 256 357 <-- audio on/off;
#X connect 6 0 9 0;
#X connect 7 0 9 1;
#X connect 8 0 9 2;
#X connect 9 0 10 0;
#X connect 10 0 13 0;
#X connect 11 0 12 0;
#X connect 11 0 12 1;
#X connect 13 0 11 0;
#X connect 14 0 13 1;
#X restore 22 107 pd Using_Our_FM_Abstraction;
#N canvas 606 161 467 477 notein 0;
#X obj -6 -7 cnv 15 1000 1000 empty empty empty 20 12 0 14 -203904
-66577 0;
#X obj 3 3 cnv 15 460 40 empty empty Notein 20 12 0 20 -233017 -66577
0;
#X obj 9 121 notein;
#X text 58 121 <-- gets MIDI data \, you may need to select your device
in Pd>Preferences>MIDI, f 55;
#X floatatom 28 179 0 0 0 0 - - -;
#X floatatom 9 202 0 0 0 0 - - -;
#X floatatom 48 154 0 0 0 0 - - -;
#X text 68 180 velocity;
#X text 77 156 channel;
#X text 59 202 note;
#X obj 9 245 stripnote;
#X text 78 243 <-- stripnote filters out note-off messages;
#X floatatom 9 269 5 0 0 0 - - -;
#X obj 9 292 mtof;
#X obj 9 316 osc~;
#X obj 9 340 *~ 0.1;
#X obj 9 404 clip~ -1 1;
#X obj 9 428 dac~;
#X obj 9 382 *~;
#X obj 69 360 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 86 356 <-- audio on/off;
#X text 7 46 It's about time we made a synth that's playable with a
midi interface. To do this \, we can use [notein ].;
#X text 7 86 This patch uses only the latest pitch from a midi input
to drive an [osc~ ] object.;
#X connect 2 0 5 0;
#X connect 2 1 4 0;
#X connect 2 2 6 0;
#X connect 4 0 10 1;
#X connect 5 0 10 0;
#X connect 10 0 12 0;
#X connect 12 0 13 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 15 0 18 0;
#X connect 16 0 17 0;
#X connect 16 0 17 1;
#X connect 18 0 16 0;
#X connect 19 0 18 1;
#X restore 22 157 pd notein;
#X text 260 155 Get MIDI data into a patch, f 34;
#N canvas 577 115 469 264 Making_A_Playable_Abstraction 0;
#X obj -9 -6 cnv 15 1000 1000 empty empty empty 20 12 0 14 -203904
-66577 0;
#X obj 3 3 cnv 15 460 40 empty empty Making_a_playable_FM_abstraction
20 12 0 20 -233017 -66577 0;
#X text 5 46 With a few changes \, we can adapt the simpleFM~ abstraction
into one that will work nicely with a MIDI keyboard or interface.;
#X text 5 106 The key difference is that \, instead of using on-screen
controls \, we can grab the MIDI values from the device instead.;
#X text 5 166 Double click the abstraction to see how this was done:
;
#X obj 179 216 FMvoice~;
#X restore 22 209 pd Making_A_Playable_Abstraction;
#X text 260 207 Turn simpleFM~ into a playable abstraction, f 34;
#X text 259 265 Create multiple instances of our FM synth for MIDI
polyphony, f 34;
#N canvas 240 62 468 760 MIDI_Polyphony_in_Pd 0;
#X obj -8 -8 cnv 15 1000 1000 empty empty empty 20 12 0 14 -203904
-66577 0;
#X obj 3 3 cnv 15 460 40 empty empty Using_our_New_FM_abstraction 20
12 0 20 -233017 -66577 0;
#X obj 17 62 notein;
#X floatatom 17 86 5 0 0 0 - - -;
#X floatatom 67 86 5 0 0 0 - - -;
#X text 107 85 <-- incoming MIDI note-on and note-off messages;
#X obj 17 109 stripnote;
#X floatatom 17 132 5 0 0 0 - - -;
#X floatatom 77 132 5 0 0 0 - - -;
#X text 118 132 <-- [FMvoice~ ] only needs note-on messages;
#X obj 17 194 poly 4 1;
#X text 86 193 <-- [poly] adds a voice number to incoming MIDI note/velocity
pairs. In this case \, it will split incoming notes across 4 voices
\, with voice stealing, f 48;
#X floatatom 17 289 5 0 0 0 - - -;
#X floatatom 57 289 5 0 0 0 - - -;
#X floatatom 97 289 5 0 0 0 - - -;
#X text 139 289 Voice | Note | Velocity;
#X obj 17 329 - 1;
#X text 78 329 <-- poly counts from 1 \, but we need voices that start
from 0 to work with clone (below), f 41;
#X obj 17 410 pack f f;
#X obj 17 646 clone FMvoice~ 4;
#X text 83 406 <-- we pack the note number with the voice number \,
and that note is then sent to the corresponding instance (voice) in
clone (below), f 41;
#X obj 158 482 hsl 200 30 0.01 200 1 1 \$0-modFreq empty MODULATOR_MULT
-2 16 0 15 -262130 -1 -1 8200 1;
#X obj 158 515 hsl 200 30 0.1 10 0 1 \$0-depth empty DEPTH_MULT -2
16 0 15 -232576 -1 -1 15900 1;
#X obj 17 672 clip~ -1 1;
#X obj 17 698 dac~;
#X msg 71 563 all \$1;
#X msg 127 563 all \$1;
#X text 175 563 <-- here we add "all" before the parameters being set.
This ensures all instances of the FMvoice synth get the message.,
f 31;
#X text 139 646 <-- this is where the magic happens \, [clone] creates
multiple instances (voices) of our FMvoice~ abstraction \, allowing
us to set up polyphonic synths with little extra coding!, f 42;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 6 0;
#X connect 4 0 6 1;
#X connect 6 0 7 0;
#X connect 6 1 8 0;
#X connect 7 0 10 0;
#X connect 8 0 10 1;
#X connect 10 0 12 0;
#X connect 10 1 13 0;
#X connect 10 2 14 0;
#X connect 12 0 16 0;
#X connect 13 0 18 1;
#X connect 16 0 18 0;
#X connect 18 0 19 0;
#X connect 19 0 23 0;
#X connect 21 0 25 0;
#X connect 22 0 26 0;
#X connect 23 0 24 0;
#X connect 23 0 24 1;
#X connect 25 0 19 1;
#X connect 26 0 19 2;
#X restore 22 266 pd MIDI_Polyphony_in_Pd;
