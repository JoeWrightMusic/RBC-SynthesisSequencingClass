#N canvas 189 72 915 563 12;
#X obj 2 3 cnv 15 886 25 empty empty 6.1:\ MIDI\ input 20 12 0 14 #dcdcdc #404040 0;
#X text 22 36 We can use notein to grab the data from any midi instrument listed in Edit>Preferences>MIDI>Input Devices;
#X obj 574 99 notein;
#X floatatom 593 157 0 0 0 0 - - - 0;
#X floatatom 574 180 0 0 0 0 - - - 0;
#X floatatom 613 132 0 0 0 0 - - - 0;
#X text 633 158 velocity;
#X text 642 134 channel;
#X text 624 180 note;
#X text 22 222 1 - create and connect a [stripnote] object;
#X text 22 251 2 - scale the velocity (0-127) down to a volume level signal (0-1) by dividing by 127;
#X text 22 296 3 - convert note numbers to frequency. Which object did we use for this in previous labs?;
#X text 22 341 4 - use [waveSelect~] \, [arUI~] and [output~] to create a basic MIDI synth. We need to use the velocity value to trigger a volume level for scaling and a bang for the AR abstraction;
#X text 22 76 Before we get patching \, let's have a quick look at the [notein] helpfile. You'll see that there are lot's of objects for different types of MIDI input/output. We'll mostly use [notein] in the labs \, but you may want to explore [bendin] and [ctlin] for your own patches.;
#X text 22 411 comment;
#X text 22 167 For now \, we can use [stripnote] to remove note-off messages from [notein] \, letting us focus on the note-ons only. Do the following:;
#X connect 2 0 4 0 empty;
#X connect 2 1 3 0 empty;
#X connect 2 2 5 0 empty;
