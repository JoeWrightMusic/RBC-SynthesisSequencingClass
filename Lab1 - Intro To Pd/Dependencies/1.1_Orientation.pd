#N canvas 189 38 627 825 12;
#X obj 7 6 cnv 25 596 35 empty empty LAB\ 1.1\ -\ Orientation 20 12 0 25 #e0e0e0 #404040 0;
#X obj 18 130 delay;
#X floatatom 73 130 5 0 0 0 - - - 0;
#X symbolatom 126 130 10 0 0 0 - - - 0;
#X obj 214 130 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 245 130 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 276 130 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X text 10 87 This is a Pure Data (Pd) canvas \, a space where you can put together your patches (programs) using visual blocks \, called objects. Here are a few:, f 82;
#X obj 7 45 cnv 15 346 34 empty empty Pure\ Data 20 12 0 14 #e0e0e0 #404040 0;
#X obj 7 238 cnv 15 346 34 empty empty Editing\ Pd\ Patches 20 12 0 14 #e0e0e0 #404040 0;
#X obj 7 378 cnv 15 346 34 empty empty Creating\ Objects 20 12 0 14 #e0e0e0 #404040 0;
#X text 10 470 A quicker way to create objects is with shortcuts \, you can pick these up as you go along in the labs \, or by checking them in the "Put" menu. Here's a few you'll use a lot..., f 82;
#X obj 11 547;
#X text 10 521 Cmd/Ctl-1: blank object., f 82;
#X text 40 547 once created \, you can type the name of the Pd object you need in the box., f 78;
#X msg 9 625;
#X floatatom 109 625 5 0 0 0 - - - 0;
#X text 210 623 comment;
#X text 107 581 Cmd/Ctl-3: Number, f 11;
#X text 10 581 Cmd/Ctl-2: Message, f 11;
#X text 209 581 Cmd/Ctl-5: Comment, f 11;
#X text 309 581 Cmd/Ctl-Shift-B: Bang, f 16;
#X obj 310 626 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 440 581 Cmd/Ctl-Shift-T: Toggle, f 16;
#X obj 441 625 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 10 646 We'll explore how these objects work together through the labs and examples., f 83;
#X obj 7 718 cnv 15 346 34 empty empty Patching 20 12 0 14 #e0e0e0 #404040 0;
#X text 7 758 Finally \, Pd works by 'patching' together objects \, carrying data from object to object similar to the way that modular synths pass signals through patch cables. You can see patch inlets/outlets as small tabs it the top/bottom of objects \, and patch them together by clicking and dragging from outlets to inlets., f 84;
#X floatatom 10 830 5 0 127 0 - - - 0;
#X obj 13 877 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X text 49 830 <- number;
#X text 152 875 <- number is sent to a horizontal slider;
#X text 20 853 <- patch cable: carries the number on to the next object;
#X text 10 673 You can find all the most useful shortcuts in the 'Edit' and 'Put' menus in the top bar.;
#X text 10 154 Everything in this module can be reproduced with the most basic "Vanilla" version of Pd. There are different versions of Pure Data available \, with expanded capabilities or improved user interfaces \, but we're using Plug Data for this course \, but using only objects from the "Vanilla" version. This should give us tow advantages: 1) that we can run Pd in the DAW \, and 2) that \, by using vanilla objects \, we can run our patches in any other version of Pd., f 82;
#X text 10 278 By default \, the Pd window will be 'locked' \, you can enter edit mode with the shortcut: Cmd-E / Ctl E. One Way to see the difference is the change in the background of PlugData \, and in the outline of selected objects.The patch can be locked again with the same shortcut. You will see other small changes in the UI with an unlocked patch too \, e.g. the edit/performance icons will be highlighted in the top bar., f 75;
#X text 10 415 One way to create objects in Pd is through the "add object" menu \, where you can see options for creating different kinds of objects. you'll find this in the top bar of PlugData \, represented as a cube with a '+' symbol on it. But this becomes clunky quite quickly., f 82;
#X connect 28 0 29 0;
