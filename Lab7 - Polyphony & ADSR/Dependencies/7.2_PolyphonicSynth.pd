#N canvas 150 82 1125 725 12;
#X obj 2 7 cnv 15 1113 25 empty empty 7.2:\ Polyphonic\ FM\ Synth 20 12 0 14 #dcdcdc #404040 0;
#X obj 542 77 hsl 107 37 0.1 1000 1 1 empty empty Modulator\ Ratio -2 -8 0 10 #fcfcfc #000000 #000000 950 1;
#X obj 674 77 hsl 107 37 0.1 10000 1 1 empty empty Modulator\ Depth -2 -8 0 10 #fcfcfc #000000 #000000 2620 1;
#X obj 465 635 output~;
#X obj 809 77 hsl 107 37 10 1000 1 1 empty empty Attack -2 -8 0 10 #fcfcfc #000000 #000000 4200 1;
#X obj 946 77 hsl 103 37 0.001 10000 1 1 empty empty Release -2 -8 0 10 #fcfcfc #000000 #000000 9800 1;
#X obj 447 65 notein;
#X obj 73 125 poly 16 1;
#X text 21 125 >>>>;
#X obj 447 94 stripnote;
#X text 21 64 1 - connect the poly object below this comment \, it has 16 voices with voice-stealing enabled, f 52;
#X text 22 155 2 - lets create a [clone] object which will get the name of our FMvoiceAR~ object as it's argument \, and then tne number of voices we need, f 52;
#X text 22 244 3 - For whatever reason \, the Pd gods decided poly and clone would count differently. We need to take 1 away from the first output of poly \, and then pack the three values together with [pack 0 0 0], f 52;
#X text 22 321 4 - we can send messages to all members of a [clone] by using an [all \$1( message. Lets use it to connect our sliders, f 52;
#X text 22 382 5 - test!;
#X text 22 216 i.e.;
#X obj 65 215 clone voice-FMAR~ 16;
#X text 21 36 Let's take the abstraction from last week and use it in a polyphonic synth..., f 112;
#X connect 6 0 9 0;
#X connect 6 1 9 1;
