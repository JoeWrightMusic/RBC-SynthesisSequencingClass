#N canvas 94 25 1054 809 12;
#X obj 4 5 cnv 15 348 25 empty empty 7.1:\ Poly\ and\ Clone 20 12 0 14 #dcdcdc #404040 0;
#X obj 595 71 clone voice-FMAR~ 4;
#X obj 506 71 poly 4 1;
#X text 19 43 Pd has two objects \, [poly] and [clone] \, that are designed to make polyphony easy to implement. Using clone \, we can take a synth and make multiple copies which get hidden inside a single object. We can then use [poly] to assign incoming notes to the various instances of our synth whithin [clone];
#X text 19 135 Before we make a polyphonic synth \, let's take a look at the poly object...;
#X obj 594 234 notein;
#X obj 507 234 unpack;
#X msg 504 175 60 127;
#X msg 564 175 40 127;
#X msg 624 175 55 127;
#X msg 514 195 60 0;
#X msg 574 195 40 0;
#X msg 634 195 55 0;
#X floatatom 496 336 5 0 0 0 - - - 0;
#X floatatom 536 336 5 0 0 0 - - - 0;
#X floatatom 576 336 5 0 0 0 - - - 0;
#X floatatom 654 336 5 0 0 0 - - - 0;
#X floatatom 694 336 5 0 0 0 - - - 0;
#X floatatom 734 336 5 0 0 0 - - - 0;
#X text 493 355 voice;
#X text 536 355 note;
#X text 575 355 vel;
#X text 653 355 voice;
#X text 696 355 note;
#X text 735 355 vel;
#X obj 506 276 poly 2;
#X obj 654 276 poly 22;
#X text 19 191 The first argument of [poly] sets the number of voices it will assign notes to. With each incoming note-on message \, [poly] will look to see if there is a free voice available \, and if so \, will pass on the MIDI note/velocity along with the number of the free voice. You can see this in the example on the right \, where with each new note \, the voice number goes up \, and that these same voices are freed with note-off messages.;
#X text 19 326 You may notice that the [poly 2] object 'jams' up quite quickly: after 2 notes it no longer passes on the incoming note-on messages until the first two notes are freed. This is the default behaviour \, but it can be changed...;
#X text 492 369 (2 voices);
#X text 651 369 (22 voices);
#X text 20 423 In this next example \, the two [poly] objects has a second argument \, which sets whether or not voice-stealing is on.;
#X obj 594 494 notein;
#X obj 507 494 unpack;
#X msg 504 435 60 127;
#X msg 564 435 40 127;
#X msg 624 435 55 127;
#X msg 514 455 60 0;
#X msg 574 455 40 0;
#X msg 634 455 55 0;
#X floatatom 496 596 5 0 0 0 - - - 0;
#X floatatom 536 596 5 0 0 0 - - - 0;
#X floatatom 576 596 5 0 0 0 - - - 0;
#X floatatom 654 596 5 0 0 0 - - - 0;
#X floatatom 694 596 5 0 0 0 - - - 0;
#X floatatom 734 596 5 0 0 0 - - - 0;
#X text 493 615 voice;
#X text 536 615 note;
#X text 575 615 vel;
#X text 653 615 voice;
#X text 696 615 note;
#X text 735 615 vel;
#X text 492 629 (voice stealing on);
#X text 651 629 (voice steling off);
#X obj 506 536 poly 2 1;
#X obj 654 536 poly 2 0;
#X text 20 473 With voice stealing on \, [poly] continues to assign new notes to voices even if all its existing voices are still playing. In this case \, the oldest note has its place 'stolen' by the newest note.;
#X text 20 653 Finally \, one quirk of [poly] and clone is that they don't agree on how they number voices. [poly] counts from 1 \, and [clone] counts from 0 We therefore have to subtract 1 from [poly]'s voice assignments before they will work properly with clone;
#X obj 496 754 clone voice-FMAR~ 4;
#X obj 496 681 poly 4 1;
#X obj 496 705 - 1;
#X obj 496 729 pack 0 0 0;
#X text 575 681 Assigns to voice numbers: 1 \, 2 \, 3 \, & 4;
#X text 637 753 Expects voice numbers: 0 \, 1 \, 2 \, & 3;
#X text 574 703 <-- Reduce voice numbers by 1;
#X connect 5 0 25 0;
#X connect 5 0 26 0;
#X connect 5 1 25 1;
#X connect 5 1 26 1;
#X connect 6 0 25 0;
#X connect 6 0 26 0;
#X connect 6 1 25 1;
#X connect 6 1 26 1;
#X connect 7 0 6 0;
#X connect 8 0 6 0;
#X connect 9 0 6 0;
#X connect 10 0 6 0;
#X connect 11 0 6 0;
#X connect 12 0 6 0;
#X connect 25 0 13 0;
#X connect 25 1 14 0;
#X connect 25 2 15 0;
#X connect 26 0 16 0;
#X connect 26 1 17 0;
#X connect 26 2 18 0;
#X connect 32 0 54 0;
#X connect 32 0 55 0;
#X connect 32 1 54 1;
#X connect 32 1 55 1;
#X connect 33 0 54 0;
#X connect 33 0 55 0;
#X connect 33 1 54 1;
#X connect 33 1 55 1;
#X connect 34 0 33 0;
#X connect 35 0 33 0;
#X connect 36 0 33 0;
#X connect 37 0 33 0;
#X connect 38 0 33 0;
#X connect 39 0 33 0;
#X connect 54 0 40 0;
#X connect 54 1 41 0;
#X connect 54 2 42 0;
#X connect 55 0 43 0;
#X connect 55 1 44 0;
#X connect 55 2 45 0;
#X connect 59 0 60 0;
#X connect 59 1 61 1;
#X connect 59 2 61 2;
#X connect 60 0 61 0;
#X connect 61 0 58 0;
