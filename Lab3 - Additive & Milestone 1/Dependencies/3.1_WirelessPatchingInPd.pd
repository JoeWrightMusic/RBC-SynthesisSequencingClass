#N canvas 0 -1055 1364 774 12;
#X obj 874 673 *~ 0.5;
#X obj 874 723 dac~;
#X obj 10 11 cnv 15 286 25 empty empty 3.1\ -\ "Wireless"\ Patching\ in\ Pd 20 12 0 14 #e0e0e0 #404040 0;
#X text 12 42 Soon after some introductory patching \, a Pd user will soon discover the slight inconvenience of connection lines running over objects to reach other objects. Most likely you will end up with a mess of Pd spaghetti at some point.;
#X text 12 99 Luckily \, there's a solution. Using the send and receive objects ( [s] & [r] ) data can be sent from one part of the patch to another without connecting lines. These objects can also send data to other windows. The send and receive objects need an argument to identify each other. This argument is usually in the form of a word.;
#X obj 14 202 cnv 15 200 25 empty empty Sending\ Control\ Data: 20 12 0 12 #dcdcdc #404040 0;
#X obj 264 202 cnv 15 200 25 empty empty Sending\ Audio\ Signals 20 12 0 12 #dcdcdc #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array one2many 128 float 3;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#X coords 0 1 128 -1 200 140 1;
#X restore 456 322 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array many2master 512 float 3;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
#X coords 0 1 512 -1 200 140 1;
#X restore 969 594 graph;
#X obj 707 582 catch~ many-to-master;
#X text 391 239 To send audio signals wirelessly \, we can use [s~] and [r~] \, but there are some slight complications with this method. The audio version of [s]&[r] can only have one send - [s~] - going to multiple receives - [r~].;
#X obj 707 724 tabwrite~ many2master;
#X obj 874 648 *~;
#X obj 8 301 cnv 15 60 80 empty empty empty 20 12 0 14 #ececec #404040 0;
#X floatatom 14 391 5 0 0 0 - - - 0;
#X obj 15 273 mtof;
#X text 86 319 object with the argument \,;
#X text 86 332 osc;
#X text 56 359 <--- as you can see here!;
#X obj 15 242 nbx 5 14 -1e+37 1e+37 0 1 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 45 256;
#X text 56 306 <--- send frequency to an [r];
#X obj 259 367 cnv 15 110 55 empty empty empty 20 12 0 14 #ececec #404040 0;
#X obj 264 373 s~ one-to-many;
#X obj 264 399 r~ one-to-many;
#X obj 264 267 t b b;
#X msg 264 308 0 1000;
#X obj 264 244 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 264 334 line~;
#X obj 264 443 tabwrite~ one2many;
#X msg 393 404 1;
#X obj 393 384 loadbang;
#X obj 264 287 del 50;
#X msg 331 308 0.5 50;
#X obj 393 422 metro 25;
#X obj 890 287 cnv 15 140 55 empty empty empty 20 12 0 14 #ececec #404040 0;
#X obj 897 293 throw~ many-to-one;
#X obj 896 319 catch~ many-to-one;
#X text 823 238 In cases where we need to do the opposite - send many sources to one receive - we can use [throw~] and [catch~];
#X text 823 349 To see these in action \, have a look at the example below...;
#X obj 14 502 cnv 15 300 25 empty empty Example\ using\ s/r\ s~/r~\ throw~/catch~ 20 12 0 12 #dcdcdc #404040 0;
#X obj 892 549 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 874 694 clip~ -1 1;
#X msg 788 673 1;
#X obj 788 649 loadbang;
#X obj 788 694 metro 25;
#X msg 14 600 0 1000;
#X obj 14 536 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 14 626 line~;
#X obj 14 579 del 50;
#X msg 81 600 0.5 50;
#X obj 14 655 s~ env-to-many;
#X text 912 548 <--- TURN SOUND ON/OFF;
#X text 30 536 <--- TRIGGER NOTE;
#X obj 228 653 osc~;
#X obj 228 632 * 1;
#X obj 228 674 *~ 1;
#X obj 144 601 mtof;
#X obj 144 580 nbx 5 14 -1e+37 1e+37 0 1 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 60 256;
#X obj 14 559 t b b b;
#X obj 144 624 s oscFreq;
#X obj 15 306 s freq;
#X obj 14 359 r freq;
#X obj 228 569 r oscFreq;
#X obj 228 592 t f b;
#X msg 255 612 0.75;
#X obj 228 725 throw~ many-to-master;
#X obj 265 674 r~ env-to-many;
#X obj 228 705 *~;
#X obj 385 653 osc~;
#X obj 385 569 r oscFreq;
#X obj 385 592 t f b;
#X msg 412 612 0.75;
#X obj 385 725 throw~ many-to-master;
#X obj 441 674 r~ env-to-many;
#X obj 385 705 *~;
#X obj 385 632 * 3;
#X obj 385 674 *~ 0.33;
#X obj 587 569 r oscFreq;
#X obj 547 599 noise~;
#X obj 547 705 *~;
#X obj 596 674 r~ env-to-many;
#X obj 547 725 throw~ many-to-master;
#X obj 547 674 *~ 0.5;
#X obj 547 647 bp~ 100 1;
#X connect 0 0 41 0;
#X connect 9 0 12 0;
#X connect 9 0 11 0;
#X connect 12 0 0 0;
#X connect 15 0 60 0;
#X connect 19 0 15 0;
#X connect 23 0 28 0;
#X connect 24 0 31 0;
#X connect 24 1 32 0;
#X connect 25 0 27 0;
#X connect 26 0 24 0;
#X connect 27 0 22 0;
#X connect 29 0 33 0;
#X connect 30 0 29 0;
#X connect 31 0 25 0;
#X connect 32 0 27 0;
#X connect 33 0 28 0;
#X connect 40 0 12 1;
#X connect 41 0 1 0;
#X connect 41 0 1 1;
#X connect 42 0 44 0;
#X connect 43 0 42 0;
#X connect 44 0 11 0;
#X connect 45 0 47 0;
#X connect 46 0 58 0;
#X connect 47 0 50 0;
#X connect 48 0 45 0;
#X connect 49 0 47 0;
#X connect 53 0 55 0;
#X connect 54 0 53 0;
#X connect 55 0 67 0;
#X connect 56 0 59 0;
#X connect 57 0 56 0;
#X connect 58 0 48 0;
#X connect 58 1 49 0;
#X connect 58 2 57 0;
#X connect 61 0 14 0;
#X connect 62 0 63 0;
#X connect 63 0 54 0;
#X connect 63 1 64 0;
#X connect 64 0 53 1;
#X connect 66 0 67 1;
#X connect 67 0 65 0;
#X connect 68 0 76 0;
#X connect 69 0 70 0;
#X connect 70 0 75 0;
#X connect 70 1 71 0;
#X connect 71 0 68 1;
#X connect 73 0 74 1;
#X connect 74 0 72 0;
#X connect 75 0 68 0;
#X connect 76 0 74 0;
#X connect 77 0 83 1;
#X connect 78 0 83 0;
#X connect 79 0 81 0;
#X connect 80 0 79 1;
#X connect 82 0 79 0;
#X connect 83 0 82 0;
