#N canvas 199 56 1073 736 12;
#X obj 11 11 cnv 15 350 25 empty empty 3.7:\ Make\ a\ Waveselect\ Abstraction 20 12 0 14 #dcdcdc #404040 0;
#X obj 659 323 osc~;
#X obj 482 276 vradio 25 1 0 4 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0;
#X text 510 280 sine;
#X text 510 305 triangle;
#X text 510 330 square;
#X text 510 355 saw;
#X text 652 158 FREQUENCY (Hz);
#X obj 764 180 inlet;
#X text 762 157 WAVE SEL (0-3);
#X obj 904 180 inlet;
#X text 902 157 RESET PHASE (bang);
#X obj 813 180 loadbang;
#X obj 654 181 inlet~;
#X obj 714 323 triOsc~;
#X obj 818 323 sawOsc~;
#X obj 916 323 sqOsc~;
#X text 16 50 Lets make a slightly more refined version of the wave select patch we just saw. Some of the elements are already added for you: the 4 oscillators \, a radio control for selecting the wave \, and the inputs we'd expect. Follow the steps below:;
#X text 16 193 2 - right-click on the radio control \, from there we can choose preferences \, and set up a 'hidden' send and receive for the object.;
#X text 16 153 1 - create a send from the 'wave sel' input called '\$0-setWaveSel';
#X text 16 242 3 - set the receive to match the send from the 'wave sel' input. Make a send name for the radio control called \$0-waveSel.;
#X text 16 293 4 - Create the on/off logic that takes the radio control's output and 'selects' the corresponding wave.;
#X text 17 335 5 - Change [output~] to [outlet~] \, copy to a new file and save.;
#X msg 813 204 0;
#X obj 654 474 stereoOut~;
#X connect 12 0 23 0;
